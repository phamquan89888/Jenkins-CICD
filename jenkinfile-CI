pipeline {
    agent any 
    stages {
        stage('Build') { 
            steps {
                script {
                    sh 'echo build step with the ${PYTHON_BASE_VERSION} python base version!'
                    sh 'echo build step with the ${APP_VERSION} python app version!'

                    // Check if requirement is set and not empty
                    if (env.requirement?.trim()) {
                        // Run the command only if requirement is not empty
                        echo 'requirement.txt has been set, overriding...'
                        sh '''
                        echo $requirement | base64 -d > requirements.txt
                        '''
                    } else {
                        echo "requirement is not set, using default file in repo"
                    }
                    echo 'show content of requirement.txt file'
                    sh 'cat requirements.txt'


                    // Run the docker build command with build arguments
                    echo 'Start building image...'
                    sh '''#!/bin/bash
                    docker build \
                        --build-arg PYTHON_BASE_VERSION=${PYTHON_BASE_VERSION} \
                        --build-arg APP_VERSION=${APP_VERSION} \
                        -t wizard-almanac:${APP_VERSION} .
                    '''

                    // Check the image status after build
                    sh 'docker images | grep wizard-almanac'
                    echo 'done build!'
                } 
            }
        }
        stage('Test') { 
            steps {
                script {
                    sh 'echo test the app image'
                    // Run the image in detach mode and map container port 5000 to localhost:5000
                    echo 'Run the image'
                    sh '''#!/bin/bash
                    docker run --name wizard-almanac-app  -d -p 127.0.0.1:5000:5000 wizard-almanac:${APP_VERSION}
                    '''  
                    echo 'Check container status'    

                
                    //Make a test reuest to the app and check exit status
                    // Check the exit status (0 means success, non-zero means error)
                    sh 'chmod +x app/test-app.sh'
                    sh 'app/test-app.sh'
                    STATUS = """${sh(
                            returnStatus: true,
                            script: 'echo $?'
                        )}"""
                    if (STATUS == "0") {
                        echo 'App is running as intened!'
                    } else {
                        echo 'App error'
                    }           
                }     
                
            }
        }
        stage('Push the image to company container registy') { 
            steps {
                sh 'echo Publish step'
                script {
                    // login to company container registy
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER_NAME --password-stdin'
                    // tag the image according to the tartet repo
                    sh 'docker tag wizard-almanac:${APP_VERSION} ${COMPANY_CONTAINER_REGISTRY}/wizard-almanac:${APP_VERSION}'
                    sh 'docker push ${COMPANY_CONTAINER_REGISTRY}/wizard-almanac:${APP_VERSION}'
                    // Check after push image
                    STATUS = """${sh(
                            returnStatus: true,
                            script: 'echo $?'
                        )}"""
                    if (STATUS == "0") {
                        echo 'Push image to repo successfully!'
                        sh 'echo latest image is ${COMPANY_CONTAINER_REGISTRY}/wizard-almanac:${APP_VERSION}'
                    } else {
                        echo 'Error when push image!'
                    }
                }
            }
        }
        stage('Garbage collection') { 
            steps {
                echo 'Collect and remove garbage...'
                  script {
                    echo 'Removing the running wizard-almanac-app container...'
                    // Stop and remove the container wizard-almanac-app
                    sh '''#!/bin/bash
                    docker stop wizard-almanac-app
                    docker rm wizard-almanac-app
                    '''  
                    //Make a test reuest to the app and check exit status
                    // Check the exit status (0 means success, non-zero means error)
                    try {
                        // Run the shell command and check, if found grep wizard-almanac-app, then the app is still running
                        sh 'docker ps -a | grep wizard-almanac-app'
                        echo 'wizard-almanac-app still running, encountering error when removing the app!'
                    } catch (Exception e) {
                        // If the command fails (non-zero exit code), then the app has been removed
                        echo 'wizard-almanac-app has been successfully removed!'
                    }
                    //remove all files which have been pulled from git repo
                    echo 'Removing all garbage in the working directory...'   
                    sh 'rm -rf ./*'
                    echo 'Successfully remove all garbage in the working directory'                          
                }     
            }
        }         
    }
}